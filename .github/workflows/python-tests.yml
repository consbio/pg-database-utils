name: Python tests

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      DATABASE_CONFIG_JSON: pg_database/tests/test_config.json
      DJANGO_SETTINGS_MODULE: pg_database.tests.settings
    services:
      postgis:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ''
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - '5432:5432'
        volumes:
          - '/var/run/postgresql:/var/run/postgresql'

    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v2
      - name: Install System Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential git curl
          pipx install poetry
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python Dependencies
        run: |
          poetry env use ${{ matrix.python-version }}
          poetry install
      - name: Set up database
        run: |
          psql -c 'CREATE ROLE django SUPERUSER LOGIN CREATEDB;' -U postgres
          psql -c 'CREATE ROLE travis SUPERUSER LOGIN CREATEDB;' -U postgres
          psql -c 'CREATE DATABASE test_pg_database;' -U postgres
          psql -c 'CREATE EXTENSION postgis;' -U postgres -d test_pg_database
          psql -c 'CREATE EXTENSION postgis_topology;' -U postgres -d test_pg_database
      - name: Run Tests
        run: |
          poetry run pytest
